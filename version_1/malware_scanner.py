"""
Malware Scanner
===============
Uses WMI to detect suspicious indicators of compromise (IOCs)
"""

import wmi
import os

def check_suspicious_processes():
    """Check processes and categorize by risk level"""
    print("PROCESS ANALYSIS:")
    print("-" * 20)
    
    try:
        c = wmi.WMI()
        processes = c.Win32_Process()
        safe_count = 0
        medium_count = 0
        risk_count = 0
        
        print("\n[SAFE PROCESSES]")
        for process in processes:
            if process.ExecutablePath:
                path_lower = process.ExecutablePath.lower()
                
                # Safe: System processes in correct locations
                if ('c:\\windows\\system32' in path_lower or 
                    'c:\\windows\\syswow64' in path_lower):
                    safe_count += 1
                    if safe_count <= 3:  # Limit output
                        print(f"  OK: {process.Name}")
        
        if safe_count > 3:
            print(f"  ... and {safe_count - 3} more safe system processes")
        
        print("\n[MEDIUM RISK]")
        for process in processes:
            if process.ExecutablePath:
                path_lower = process.ExecutablePath.lower()
                
                # Medium: Third-party applications in standard locations
                if ('c:\\program files' in path_lower or 
                    'c:\\users' in path_lower and 'temp' not in path_lower):
                    medium_count += 1
                    if medium_count <= 5:  # Limit output
                        print(f"  MEDIUM: {process.Name} - {process.ExecutablePath[:50]}...")
        
        if medium_count > 5:
            print(f"  ... and {medium_count - 5} more medium-risk processes")
        
        print("\n[HIGH RISK]")
        suspicious_paths = [
            'c:\\users\\public', 'appdata\\temp', 'appdata\\local\\temp',
            'windows\\temp', 'temp\\', '\\tmp\\'
        ]
        
        for process in processes:
            if process.ExecutablePath:
                path_lower = process.ExecutablePath.lower()
                for suspicious_path in suspicious_paths:
                    if suspicious_path in path_lower:
                        risk_count += 1
                        print(f"  RISK: {process.Name} - {process.ExecutablePath}")
                        break
        
        if risk_count == 0:
            print("  No high-risk processes detected")
        
        return risk_count  # Only return high-risk count for alerts
        
    except Exception as e:
        print(f"  Error checking processes: {e}")
        return 0

def check_suspicious_services():
    """Check services and categorize by risk level"""
    print("\nSERVICE ANALYSIS:")
    print("-" * 20)
    
    try:
        c = wmi.WMI()
        services = c.Win32_Service()
        safe_count = 0
        medium_count = 0
        risk_count = 0
        
        # Known safe system services
        safe_services = {
            'svchost.exe': ['system32', 'syswow64'],
            'services.exe': ['system32'],
            'lsass.exe': ['system32'],
            'winlogon.exe': ['system32']
        }
        
        print("\n[SAFE SERVICES]")
        for service in services:
            if service.PathName and service.State == "Running":
                path_lower = service.PathName.lower()
                
                # Check if it's a known safe service
                is_safe = False
                for safe_exe, safe_paths in safe_services.items():
                    if safe_exe in path_lower and any(safe_path in path_lower for safe_path in safe_paths):
                        is_safe = True
                        break
                
                if is_safe and 'svchost.exe' in path_lower:
                    safe_count += 1
                    if safe_count <= 5:  # Limit output
                        print(f"  OK: {service.Name}")
        
        if safe_count > 5:
            print(f"  ... and {safe_count - 5} more safe services")
        
        print("\n[MEDIUM RISK]")
        for service in services:
            if service.PathName and service.State == "Running":
                path_lower = service.PathName.lower()
                
                # Medium risk: Third-party but legitimate locations
                if ('program files' in path_lower or 
                    'windows\\system32\\driverstore' in path_lower or
                    ('programdata' in path_lower and 'microsoft' in path_lower)):
                    medium_count += 1
                    print(f"  MEDIUM: {service.Name} - {service.PathName[:60]}...")
        
        print("\n[HIGH RISK]")
        for service in services:
            if service.PathName and service.State == "Running":
                path_lower = service.PathName.lower()
                
                # High risk: Suspicious locations or missing files
                if ('temp' in path_lower or 
                    'appdata' in path_lower or
                    'users\\public' in path_lower or
                    ('programdata' in path_lower and 'microsoft' not in path_lower)):
                    risk_count += 1
                    print(f"  RISK: {service.Name} - {service.PathName}")
        
        if risk_count == 0:
            print("  No high-risk services detected")
        
        return risk_count  # Only return high-risk count for alerts
        
    except Exception as e:
        print(f"  Error checking services: {e}")
        return 0

def check_wmi_event_subscriptions():
    """Check for WMI event subscriptions (persistence mechanism)"""
    print("\nWMI EVENT SUBSCRIPTIONS:")
    print("-" * 30)
    
    try:
        c = wmi.WMI()
        suspicious_found = 0
        
        # Check for WMI event filters
        try:
            filters = c.query("SELECT * FROM __EventFilter")
            for filter_obj in filters:
                if filter_obj.Name and 'SCM Event Log Filter' not in filter_obj.Name:
                    suspicious_found += 1
                    print(f"  EVENT FILTER: {filter_obj.Name}")
        except:
            pass
        
        # Check for WMI event consumers
        try:
            consumers = c.query("SELECT * FROM __EventConsumer")
            for consumer in consumers:
                if hasattr(consumer, 'Name') and consumer.Name:
                    suspicious_found += 1
                    print(f"  EVENT CONSUMER: {consumer.Name}")
        except:
            pass
        
        # Check for WMI bindings
        try:
            bindings = c.query("SELECT * FROM __FilterToConsumerBinding")
            for binding in bindings:
                suspicious_found += 1
                print(f"  WMI BINDING: Filter to Consumer")
        except:
            pass
        
        if suspicious_found == 0:
            print("  No suspicious WMI event subscriptions detected")
        
        return suspicious_found
        
    except Exception as e:
        print(f"  Error checking WMI subscriptions: {e}")
        return 0

def check_startup_scripts():
    """Check for suspicious startup scripts (.vbs, .js files)"""
    print("\nSUSPICIOUS STARTUP SCRIPTS:")
    print("-" * 35)
    
    try:
        c = wmi.WMI()
        startup_programs = c.Win32_StartupCommand()
        suspicious_found = 0
        
        for program in startup_programs:
            if program.Command:
                cmd_lower = program.Command.lower()
                # Check for script files and suspicious locations
                if (('.vbs' in cmd_lower or '.js' in cmd_lower or '.bat' in cmd_lower or
                     '.ps1' in cmd_lower) or
                    ('temp' in cmd_lower or 'appdata' in cmd_lower or 
                     'programdata' in cmd_lower or 'users\\public' in cmd_lower)):
                    suspicious_found += 1
                    print(f"  ALERT: {program.Name} - {program.Command}")
        
        if suspicious_found == 0:
            print("  No suspicious startup scripts detected")
        
        return suspicious_found
        
    except Exception as e:
        print(f"  Error checking startup scripts: {e}")
        return 0

def check_system_anomalies():
    """Check for system-level anomalies"""
    print("\nSYSTEM ANOMALIES:")
    print("-" * 20)
    
    try:
        c = wmi.WMI()
        suspicious_found = 0
        
        # Check for unusual system processes
        critical_processes = ['winlogon.exe', 'csrss.exe', 'smss.exe', 'lsass.exe']
        processes = c.Win32_Process()
        
        for process in processes:
            if process.Name and process.Name.lower() in [p.lower() for p in critical_processes]:
                if process.ExecutablePath and 'system32' not in process.ExecutablePath.lower():
                    suspicious_found += 1
                    print(f"  CRITICAL PROCESS IN WRONG LOCATION: {process.Name} at {process.ExecutablePath}")
        
        # Check for processes with no parent (orphaned)
        for process in processes:
            if process.ParentProcessId == 0 and process.Name.lower() not in ['system', 'registry']:
                suspicious_found += 1
                print(f"  ORPHANED PROCESS: {process.Name} (PID: {process.ProcessId})")
        
        if suspicious_found == 0:
            print("  No system anomalies detected")
        
        return suspicious_found
        
    except Exception as e:
        print(f"  Error checking system anomalies: {e}")
        return 0

def scan_for_malware():
    """Main malware scanning function"""
    print("MALWARE SCAN USING WMI")
    print("=" * 50)
    
    total_alerts = 0
    
    total_alerts += check_suspicious_processes()
    total_alerts += check_suspicious_services()
    total_alerts += check_wmi_event_subscriptions()
    total_alerts += check_startup_scripts()
    total_alerts += check_system_anomalies()
    
    print(f"\nSCAN SUMMARY:")
    print("-" * 30)
    print(f"High-Risk Alerts: {total_alerts}")
    
    if total_alerts == 0:
        print("STATUS: System appears clean - no high-risk indicators found.")
    elif total_alerts <= 2:
        print("STATUS: Low concern - few suspicious indicators detected.")
    elif total_alerts <= 5:
        print("STATUS: Medium concern - several suspicious indicators detected.")
        print("RECOMMENDATION: Review findings and consider antivirus scan.")
    else:
        print("STATUS: High concern - many suspicious indicators detected!")
        print("RECOMMENDATION: Run full antivirus scan before drive operations.")
    
    return total_alerts

if __name__ == "__main__":
    scan_for_malware()
    input("Press Enter to exit...")